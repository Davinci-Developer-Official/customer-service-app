// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id              String          @id @default(cuid())
  name            String?
  email           String          @unique
  password        String
  emailVerified   DateTime?
  role            String?
  status          String?
  image           String?
  counter         Int?
  shift           String?
  shiftStartDate  DateTime?
  shiftEndDate    DateTime?
  records         Record[]
  editRecordsAsAttendant EditedRecord[] @relation("AttendantRelation")
  editRecordsAsSupervisor EditedRecord[] @relation("SupervisorRelation")
  attendantNotification ShiftNotification[] @relation("AttendantNotificationRelation")
  supervisorNotification ShiftNotification[] @relation("SupervisorNotificationRelation")
  accounts        Account[]
  sessions        Session[] 
  createdAt       DateTime @default(now())
  updatedAt       DateTime? @updatedAt
}

model Record {
  id             String          @id @default(cuid())
  ticket         String
  recordType String?
  name           String
  service        String  
  subService     String?        
  recordNumber   String?
  value          Int
  counter        String
  shift          String
  userId         String
  editRecords    EditedRecord[]
  user           User @relation(fields: [userId], references: [id])   
  createdAt      DateTime @default(now())
  updatedAt      DateTime? @updatedAt
}

model EditedRecord {
  id            String          @id @default(cuid())
  recordId      String 
  record        Record @relation(fields: [recordId], references: [id])
  ticket        String
  recordType String?
  name          String
  service       String  
  subService    String?        
  recordNumber       String
  value         Int
  counter       String
  shift         String
  attendantComment       String?
  supervisorComment       String?
  status        String
  attendantId   String
  supervisorId  String?
  attendant     User @relation("AttendantRelation", fields: [attendantId], references: [id])
  supervisor    User? @relation("SupervisorRelation", fields: [supervisorId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime? @updatedAt
}


 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShiftNotification {
  id       String   @unique
  expires      DateTime
  attendantId   String
  supervisorId  String?
  attendant     User @relation("AttendantNotificationRelation", fields: [attendantId], references: [id])
  supervisor    User? @relation("SupervisorNotificationRelation", fields: [supervisorId], references: [id])
  dismiss       String?
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
